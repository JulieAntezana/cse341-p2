{
  "openapi": "3.0.0",
  "info": {
    "description": "This is a sample Flower Guide server.\n",
    "version": "2.0.0",
    "title": "Floral API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "jantezana@byui.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "https://cse341-p2.onrender.com",
  "basePath": "/",
  "tags": [
    {
      "name": "flowers",
      "description": "Access to Flower Guide"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "Not Yet Implemented",
      "description": "These API endpoints are designed and will be created in the near future"
    }
  ],
  "schemes": ["https"],
  "schemas": {
    "User": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "_id": {
          "type": "integer",
          "format": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }        }
      }
    },
    "Credentials": {
      "type": "object",
      "required": ["password", "username", "displayName"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Flower": {
      "type": "object",
      "required": [
        "id", "name", "commonName", "botanicalName", "botanicalGenus", "description", "colorRange"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "rose"
        },
        "commonName": {
          "type": "string"
        },
        "botanicalName": {
          "type": "string"
        },
        "botanicalFamily": {
          "type": "string"
        },
        "botanicalGenus": {
          "type": "string"
        },
        "availability": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "where": {
                "type": "string"
              },
              "when": {
                "type": "string"
              }
            }
          }
        },
        "vaseLife": {
          "type": "string"
        },
        "description": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "notes": {
                "type": "string"
              },
              "stemLength": {
                "type": "string"
              }
            }
          }
        },
        "colorRange": {
          "type": "string"
        },
        "florist": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "conditioning": {
                "type": "string"
              },
              "storage": {
                "type": "string"
              },
              "display": {
                "type": "string"
              },
              "stemType": {
                "type": "string"
              }
            }
          }
        },
        "homeCare": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/schemas/Tag"
          }
        }
      }
    },
  "paths": {
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This is for when a user creates an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/schemas/Credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created user",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user name value"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/schemas/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["Not Yet Implemented"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update user object",
            "required": true,
            "schema": {
              "$ref": "#/schemas/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified user"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Not Yet Implemented"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted user"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/{getAllUsers}": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Get all users",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "Array",
              "$ref": "#/schemas/User"
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/flowers": {
      "post": {
        "tags": [
          "flowers"
        ],
        "summary": "Add a new flower to the database",
        "operationId": "addFlower",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "floral_auth": [
              "write:flower",
              "read:flower"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Flower"
        }
      },
      "put": {
        "tags": ["Not Yet Implemented"],
        "summary": "Update an existing flower",
        "operationId": "updateFlower",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Recipe not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "floral_auth": [
              "write:flowers",
              "read:flowers"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Flower"
        }
      }
    },
    "/flower/findByTags": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Finds Flowers by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.",
        "operationId": "findFlowersByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/schemas/Flower"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/schemas/Flower"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "floral_auth": [
              "write:flower",
              "read:flower"
            ]
          }
        ]
      }
    },
    "/flowers/{flowerName}": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Finds Flowers by name",
        "description": "Each flower has a unique name, this will basically find a single flower by an exact name almost like an id",
        "operationId": "findFlowerByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "flowerName",
            "in": "path",
            "description": "Flower name string is required and functions as id",
            "required": true,
            "type": "string",
            "items": {
              "type": "string",
              "default": "available"
            },
            "collectionFormat": "csv"
          }
        ],
        "security": [
          {
            "floral_auth": ["write:flowers", "read:flowers"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid flower name value"
          }
        }
      }
    },
    "put": {
      "tags": [
        "Not Yet Implemented"
      ],
      "summary": "Updates a flower in the Flower Guide with form data",
      "operationId": "updateFlowerWithForm",
      "parameters": [
        {
          "name": "flowerId",
          "in": "path",
          "description": "ID of flower that needs to be updated",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "responses": {
        "405": {
          "description": "Invalid input"
        }
      },
      "security": [
        {
          "floral_auth": [
            "write:flower",
            "read:flower"
          ]
        }
      ],
      "requestBody": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Updated name of the recipe",
                  "type": "string"
                },
                "status": {
                  "description": "Updated status of the recipe",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "Not Yet Implemented"
      ],
      "summary": "Deletes a flower",
      "operationId": "deleteFlower",
      "parameters": [
        {
          "name": "flowerId",
          "in": "path",
          "description": "Flower id to delete",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "responses": {
        "400": {
          "description": "Invalid ID supplied"
        },
        "404": {
          "description": "Flower not found"
        }
      },
      "security": [
        {
          "floral_auth": [
            "write:flower",
            "read:flower"
          ]
        }
      ]
    },
    "/flower/{flowerId}/uploadImage": {
      "post": {
        "tags": [
          "Not Yet Implemented"
        ],
        "summary": "uploads an image",
        "operationId": "uploadFlowerFile",
        "parameters": [
          {
            "name": "flowerId",
            "in": "path",
            "description": "ID of flower to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "floral_auth": [
              "write:flower",
              "read:flower"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    }
  },
  "ApiResponse": {
    "type": "object",
    "properties": {
      "code": {
        "type": "integer",
        "format": "int32"
      },
      "type": {
        "type": "string"
      },
      "message": {
        "type": "string"
      }
    }
  },
  "requestBodies": {
    "Flower": {
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/schemas/Flower"
          }
        },
        "application/xml": {
          "schema": {
            "$ref": "#/schemas/Flower"
          }
        }
      },
      "description": "Flower object that needs to be added to the Flower Guide",
      "required": true
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    }
  }

}  




