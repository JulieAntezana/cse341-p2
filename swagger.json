{
  "swagger": "2.0",
  "info": {
    "description": "This is an api server for a floral guide website.\n",
    "version": "1.0.0",
    "title": "Floral API",
    "contact": {
      "email": "jantezana@byui.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "cse341-p2.onrender.com",
  "basePath": "/",
  "tags": [
    {
      "name": "flowers",
      "description": "Operations about flowers"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "Not Yet Implemented",
      "description": "These API endpoints are designed and will be created in the near future"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/": {
      "get": {
        "tags": ["auth0"],
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": ["auth0"],
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/flowers": {
      "get": {
        "tags": ["flowers"],
        "summary": "Get all flowers",
        "operationId": "getAllFlowers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "Array",
              "$ref": "#/definitions/Flower"
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "post": {
        "tags": ["flowers"],
        "summary": "Create new flower",
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "description": "This is for when flower is added to the database",
        "operationId": "createFlower",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created flower object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Flower"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created flower",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Rose"
                }
              }
            }
          },
          "400": {
            "description": "Invalid flower name value"
          },
          "500": {
            "description": "Some error occurred while creating the flower"
          }
        }
      }
    },
    "/flowers/{flowerName}": {
      "get": {
        "tags": ["flowers"],
        "summary": "Finds Flowers by name",
        "description": "Each flower has a unique name, this will basically find a single flower by an exact name almost like an id",
        "operationId": "findFlowerByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "flowerName",
            "in": "path",
            "description": "Flower name string is required and functions as id",
            "required": true,
            "type": "string",
            "items": {
              "type": "string",
              "default": "available"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid flower name value"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "put": {
        "tags": ["flowers"],
        "summary": "Updated flower",
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "description": "Updates the flower in the database.",
        "operationId": "updateFlower",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "flowerName",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated flower object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Flower"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified flower"
          },
          "400": {
            "description": "Invalid flower supplied"
          },
          "404": {
            "description": "Flower not found"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "delete": {
        "tags": ["flowers"],
        "summary": "Delete flower",
        "description": "Removes the flower from the database.",
        "operationId": "deleteFlower",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "flowerName",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted flower"
          },
          "400": {
            "description": "Invalid flower name supplied"
          },
          "404": {
            "description": "Flower not found"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Get all users",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "Array",
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This is for when a user creates an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created user",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Rosey"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user name value"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": ["auth0"],
        "summary": "Logs user into the system",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": ["auth0"],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified user"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted user"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "_id": {
          "type": "integer",
          "format": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Flower": {
      "type": "object",
      "required": ["flowerName"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "flowerName": {
          "type": "string",
          "example": "Rose"
        },
        "botanicalFamily": {
          "type": "string",
          "example": "Rosaceae"
        },
        "botanicalGenus": {
          "type": "string",
          "example": "Rosa"
        },
        "availability": {
          "type": "string"
        },
        "vaseLife": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "stemLength": {
          "type": "string"
        },
        "colorRange": {
          "type": "string"
        },
        "homeCare": {
          "type": "string"
        },
        "florist": {
          "type": "array",
          "items": {
            "conditioning": {
              "type": "string"
            },
            "storage": {
              "type": "string"
            },
            "display": {
              "type": "string"
            },
            "stemType": {
              "type": "string"
            }
          }
        }
      }
    },
    "securityDefinitions": {
      "petstore_auth": {
        "type": "oauth2",
        "authorizationUrl": "http://petstore.swagger.io/oauth/authorize",
        "flow": "implicit",
        "scopes": {
          "read:pets": "read flowers in your account",
          "write:pets": "modify flowers in your account"
        }
      }
    },
    "Credentials": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
  }
}
