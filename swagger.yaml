openapi: 3.0.0
info:
  description: |
    This is a sample Flower Guide and Floral Recipebox server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: Swagger Floral API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JANTEZANA_1/FloralAPI/1.0.0
  - url: 'https://floral.swagger.io/v2'
tags:
  - name: floral arrangement recipes
    description: Recipes for terrific floral arrangements!
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: flowers
    description: Access to Flower Guide
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our Floral Guide and Floral Arranging Recipebox
      url: 'http://swagger.io'
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Flower:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: rose
        commonName: 
          type: string
        botanicalName: 
          type: string
        botanicalFamily: 
          type: string
        botanicalGenus: 
          type: string
        availability: 
          type: array
          items: 
            type: object
            properties: 
              where: 
                type: string
              when: 
                type: string
        vaseLife: 
          type: string
        description: 
          type: array
          items: 
            type: object
            properties: 
              notes: 
                type: string
              stemLength: 
                type: string
        colorRange: 
          type: string
        florist: 
          type: array
          items: 
            type: object
            properties: 
              conditioning: 
                type: string
              storage: 
                type: string
              display: 
                type: string
              stemType: 
                type: string
        homeCare: 
          type: string        
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: Flower
    Recipe:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: wedding bouquet
        recipeSize: 
          type: string
        recipeCategory: 
          type: string
        recipeContainer: 
          type: string
        recipeIngredients: 
          type: array
          items: 
            type: object
            properties: 
              foliage: 
                type: array
                items: 
                  type: object
                  properties: 
                    foliage1: 
                      type: string
                    foliage2: 
                      type: string
                    foliage3: 
                      type: string
              focusFlowers: 
                type: array
                items: 
                  type: object
                  properties: 
                    focusFlower1: 
                      type: string
                    focusFlower2: 
                      type: string
                    focusFlower3: 
                      type: string
                    focusFlower4: 
                      type: string
                    focusFlower5: 
                      type: string
              fillerFlowers: 
                type: array
                items: 
                  type: object
                  properties: 
                    fillerFlower1: 
                      type: string
                    fillerFlower2: 
                      type: string
                    fillerFlower3: 
                      type: string
                    fillerFlower4: 
                      type: string
                    fillerFlower5: 
                      type: string
              accessories: 
                type: array
                items: 
                  type: object
                  properties: 
                    accessory1: 
                      type: string
                    accessory2: 
                      type: string
                    accessory3: 
                      type: string
                    accessory4: 
                      type: string
                    accessory5: 
                      type: string
        recipeInstructions: 
          type: array
          items: 
            type: object
            properties: 
              prep: 
                type: array
                items: 
                  type: object
                  properties: 
                    prepContainer: 
                      type: string
                    prepFoliage: 
                      type: string
                    prepFlowers: 
                      type: string
                    prepAccessories: 
                      type: string
                    prepOther: 
                      type: string
              arrange: 
                type: array
                items: 
                  type: object
                  properties: 
                    arrFoliage: 
                      type: string
                    arrFocus: 
                      type: string
                    arrFiller: 
                      type: string
                    arrAccessories: 
                      type: string
        recipeNotes: 
          type: string
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: Recipe
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Recipe:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Recipe'
        application/xml:
          schema:
            $ref: '#/components/schemas/Recipe'
      description: Recipe object that needs to be added to the recipebox
      required: true
    Flower:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Flower'
        application/xml:
          schema:
            $ref: '#/components/schemas/Flower'
      description: Flower object that needs to be added to the Flower Guide
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    floral_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://recipebox.swagger.io/oauth/dialog'
          scopes:
            'write:recipes': modify recipes in your account
            'read:recipes': read your recipes
paths:
  /flower:
    post:
      tags:
        - flower
      summary: Add a new flower to the database
      operationId: addFlower
      responses:
        '405':
          description: Invalid input
      security:
        - floral_auth:
          - 'write:flowers'
          - 'read:flowers'
      requestBody:
        $ref: '#/components/requestBodies/Flower'
    put:
      tags:
        - flower
      summary: Update an existing flower
      operationId: updateFlower
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Recipe not found
        '405':
          description: Validation exception
      security:
        - floral_auth:
            - 'write:flowers'
            - 'read:flowers'
      requestBody:
        $ref: '#/components/requestBodies/Flower'
  /flower/findByTags:
    get:
      tags:
        - flower
      summary: Finds Flowers by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findFlowersByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flower'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flower'
        '400':
          description: Invalid tag value
      security:
        - floral_auth:
            - 'write:flowers'
            - 'read:flowers'
  '/flower/{flowerId}':
    get:
      tags:
        - flower
      summary: Find flower by ID
      description: Returns a single flower
      operationId: getFlowerById
      parameters:
        - name: flowerId
          in: path
          description: ID of flower to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flower'
            application/xml:
              schema:
                $ref: '#/components/schemas/Flower'
        '400':
          description: Invalid ID supplied
        '404':
          description: Flower not found
    post:
      tags:
        - flower
      summary: Updates a flower in the Flower Guide with form data
      operationId: updateFlowerWithForm
      parameters:
        - name: flowerId
          in: path
          description: ID of flower that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the recipe
                  type: string
                status:
                  description: Updated status of the recipe
                  type: string
    delete:
      tags:
        - flower
      summary: Deletes a flower
      operationId: deleteFlower
      parameters:
        - name: flowerId
          in: path
          description: Flower id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Flower not found
      security:
        - floral_auth:
            - 'write:flowers'
            - 'read:flowers'
  /recipe:
    post:
      tags:
        - recipe
      summary: Add a new recipe to the filebox
      operationId: addRecipe
      responses:
        '405':
          description: Invalid input
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
      requestBody:
        $ref: '#/components/requestBodies/Recipe'
    put:
      tags:
        - recipe
      summary: Update an existing recipe
      operationId: updateRecipe
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Recipe not found
        '405':
          description: Validation exception
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
      requestBody:
        $ref: '#/components/requestBodies/Recipe'
  /recipe/findByTags:
    get:
      tags:
        - recipe
      summary: Finds Recipes by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findRecipesByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid tag value
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
  '/recipe/{recipeId}':
    get:
      tags:
        - recipe
      summary: Find recipe by ID
      description: Returns a single recipe
      operationId: getRecipeById
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
            application/xml:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid ID supplied
        '404':
          description: Recipe not found
    post:
      tags:
        - recipe
      summary: Updates a recipe in the recipebox with form data
      operationId: updateRecipeWithForm
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the recipe
                  type: string
                status:
                  description: Updated status of the recipe
                  type: string
    delete:
      tags:
        - recipe
      summary: Deletes a recipe
      operationId: deleteRecipe
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: recipeId
          in: path
          description: Recipe id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Recipe not found
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
  '/recipe/{recipeId}/uploadImage':
    post:
      tags:
        - recipe
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - floral_auth:
            - 'write:recipes'
            - 'read:recipes'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  '/flower/{flowerId}/uploadImage':
    post:
      tags:
        - flower
      summary: uploads an image
      operationId: uploadFlowerFile
      parameters:
        - name: flowerId
          in: path
          description: ID of flower to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - floral_auth:
            - 'write:flowers'
            - 'read:flowers'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'